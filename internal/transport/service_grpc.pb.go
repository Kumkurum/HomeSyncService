// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: service.proto

package homeSyncGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HomeSyncGrpcService_GetSensors_FullMethodName           = "/HomeSyncGrpcService/GetSensors"
	HomeSyncGrpcService_GetHistorySensorData_FullMethodName = "/HomeSyncGrpcService/GetHistorySensorData"
	HomeSyncGrpcService_SetData_FullMethodName              = "/HomeSyncGrpcService/SetData"
)

// HomeSyncGrpcServiceClient is the client API for HomeSyncGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeSyncGrpcServiceClient interface {
	GetSensors(ctx context.Context, in *SensorsRequest, opts ...grpc.CallOption) (*SensorsResponse, error)
	GetHistorySensorData(ctx context.Context, in *HistorySensorDataRequest, opts ...grpc.CallOption) (*HistorySensorsDataResponse, error)
	SetData(ctx context.Context, in *SetSensorData, opts ...grpc.CallOption) (*Error, error)
}

type homeSyncGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeSyncGrpcServiceClient(cc grpc.ClientConnInterface) HomeSyncGrpcServiceClient {
	return &homeSyncGrpcServiceClient{cc}
}

func (c *homeSyncGrpcServiceClient) GetSensors(ctx context.Context, in *SensorsRequest, opts ...grpc.CallOption) (*SensorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SensorsResponse)
	err := c.cc.Invoke(ctx, HomeSyncGrpcService_GetSensors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeSyncGrpcServiceClient) GetHistorySensorData(ctx context.Context, in *HistorySensorDataRequest, opts ...grpc.CallOption) (*HistorySensorsDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistorySensorsDataResponse)
	err := c.cc.Invoke(ctx, HomeSyncGrpcService_GetHistorySensorData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeSyncGrpcServiceClient) SetData(ctx context.Context, in *SetSensorData, opts ...grpc.CallOption) (*Error, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Error)
	err := c.cc.Invoke(ctx, HomeSyncGrpcService_SetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeSyncGrpcServiceServer is the server API for HomeSyncGrpcService service.
// All implementations must embed UnimplementedHomeSyncGrpcServiceServer
// for forward compatibility.
type HomeSyncGrpcServiceServer interface {
	GetSensors(context.Context, *SensorsRequest) (*SensorsResponse, error)
	GetHistorySensorData(context.Context, *HistorySensorDataRequest) (*HistorySensorsDataResponse, error)
	SetData(context.Context, *SetSensorData) (*Error, error)
	mustEmbedUnimplementedHomeSyncGrpcServiceServer()
}

// UnimplementedHomeSyncGrpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHomeSyncGrpcServiceServer struct{}

func (UnimplementedHomeSyncGrpcServiceServer) GetSensors(context.Context, *SensorsRequest) (*SensorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensors not implemented")
}
func (UnimplementedHomeSyncGrpcServiceServer) GetHistorySensorData(context.Context, *HistorySensorDataRequest) (*HistorySensorsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistorySensorData not implemented")
}
func (UnimplementedHomeSyncGrpcServiceServer) SetData(context.Context, *SetSensorData) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetData not implemented")
}
func (UnimplementedHomeSyncGrpcServiceServer) mustEmbedUnimplementedHomeSyncGrpcServiceServer() {}
func (UnimplementedHomeSyncGrpcServiceServer) testEmbeddedByValue()                             {}

// UnsafeHomeSyncGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeSyncGrpcServiceServer will
// result in compilation errors.
type UnsafeHomeSyncGrpcServiceServer interface {
	mustEmbedUnimplementedHomeSyncGrpcServiceServer()
}

func RegisterHomeSyncGrpcServiceServer(s grpc.ServiceRegistrar, srv HomeSyncGrpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedHomeSyncGrpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HomeSyncGrpcService_ServiceDesc, srv)
}

func _HomeSyncGrpcService_GetSensors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeSyncGrpcServiceServer).GetSensors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeSyncGrpcService_GetSensors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeSyncGrpcServiceServer).GetSensors(ctx, req.(*SensorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeSyncGrpcService_GetHistorySensorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistorySensorDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeSyncGrpcServiceServer).GetHistorySensorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeSyncGrpcService_GetHistorySensorData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeSyncGrpcServiceServer).GetHistorySensorData(ctx, req.(*HistorySensorDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeSyncGrpcService_SetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSensorData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeSyncGrpcServiceServer).SetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeSyncGrpcService_SetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeSyncGrpcServiceServer).SetData(ctx, req.(*SetSensorData))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeSyncGrpcService_ServiceDesc is the grpc.ServiceDesc for HomeSyncGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeSyncGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HomeSyncGrpcService",
	HandlerType: (*HomeSyncGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSensors",
			Handler:    _HomeSyncGrpcService_GetSensors_Handler,
		},
		{
			MethodName: "GetHistorySensorData",
			Handler:    _HomeSyncGrpcService_GetHistorySensorData_Handler,
		},
		{
			MethodName: "SetData",
			Handler:    _HomeSyncGrpcService_SetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
